//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.Mapping;

namespace Com.O2Bionics.ChatService.DataModel
{
	/// <summary>
	/// Database       : orcl
	/// Data Source    : o2b-orcl
	/// Server Version : 12.2.0.1.0
	/// </summary>
	public partial class ChatDatabase : LinqToDB.Data.DataConnection
	{
		public ITable<AGENT_SESSION>       AGENT_SESSION       { get { return this.GetTable<AGENT_SESSION>(); } }
		public ITable<CANNED_MESSAGE>      CANNED_MESSAGE      { get { return this.GetTable<CANNED_MESSAGE>(); } }
		public ITable<CHAT_EVENT>          CHAT_EVENT          { get { return this.GetTable<CHAT_EVENT>(); } }
		public ITable<CHAT_EVENT_TYPE>     CHAT_EVENT_TYPE     { get { return this.GetTable<CHAT_EVENT_TYPE>(); } }
		public ITable<CHAT_SESSION>        CHAT_SESSION        { get { return this.GetTable<CHAT_SESSION>(); } }
		public ITable<CHAT_SESSION_STATUS> CHAT_SESSION_STATUS { get { return this.GetTable<CHAT_SESSION_STATUS>(); } }
		public ITable<CUSTOMER>            CUSTOMERs           { get { return this.GetTable<CUSTOMER>(); } }
		public ITable<CUSTOMER_USER>       CUSTOMER_USER       { get { return this.GetTable<CUSTOMER_USER>(); } }
		public ITable<DEPARTMENT>          DEPARTMENTs         { get { return this.GetTable<DEPARTMENT>(); } }
		public ITable<FORGOT_PASSWORD>     FORGOT_PASSWORD     { get { return this.GetTable<FORGOT_PASSWORD>(); } }
		public ITable<OBJECT_STATUS>       OBJECT_STATUS       { get { return this.GetTable<OBJECT_STATUS>(); } }
		public ITable<PROPERTY_BAG>        PROPERTY_BAG        { get { return this.GetTable<PROPERTY_BAG>(); } }
		public ITable<USER_ROLE>           USER_ROLE           { get { return this.GetTable<USER_ROLE>(); } }
		public ITable<VISITOR>             VISITORs            { get { return this.GetTable<VISITOR>(); } }
		public ITable<WIDGET_LOAD>         WIDGET_LOAD         { get { return this.GetTable<WIDGET_LOAD>(); } }

		partial void InitDataContext();
	}

	[Table("AGENT_SESSION")]
	public partial class AGENT_SESSION
	{
		[PrimaryKey, NotNull] public byte[]   GUID                  { get; set; } // RAW(16)
		[Column,     NotNull] public uint?    CUSTOMER_ID           { get; set; } // NUMBER
		[Column,     NotNull] public uint?    AGENT_ID              { get; set; } // NUMBER
		[Column,     NotNull] public sbyte    IS_CONNECTED          { get; set; } // NUMBER (1,0)
		[Column,     NotNull] public DateTime ADD_TIMESTAMP         { get; set; } // DATE
		[Column,     NotNull] public DateTime LAST_ACCESS_TIMESTAMP { get; set; } // DATE

		#region Associations

		/// <summary>
		/// FK_AGENT_SESSION_AGENT
		/// </summary>
		[Association(ThisKey="AGENT_ID", OtherKey="ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_AGENT_SESSION_AGENT", BackReferenceName="AGENTSESSIONAGENTs")]
		public CUSTOMER_USER AGENTSESSIONAGENT { get; set; }

		/// <summary>
		/// FK_AGENT_SESSION_CUSTOMER
		/// </summary>
		[Association(ThisKey="CUSTOMER_ID", OtherKey="ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_AGENT_SESSION_CUSTOMER", BackReferenceName="AGENTSESSIONs")]
		public CUSTOMER AGENTSESSIONCUSTOMER { get; set; }

		#endregion
	}

	[Table("CANNED_MESSAGE")]
	public partial class CANNED_MESSAGE
	{
		[PrimaryKey, NotNull    ] public uint     ID               { get; set; } // NUMBER
		[Column,     NotNull    ] public uint?    CUSTOMER_ID      { get; set; } // NUMBER
		[Column,        Nullable] public uint?    USER_ID          { get; set; } // NUMBER
		[Column,        Nullable] public uint?    DEPARTMENT_ID    { get; set; } // NUMBER
		[Column,     NotNull    ] public DateTime CREATE_TIMESTAMP { get; set; } // DATE
		[Column,     NotNull    ] public DateTime UPDATE_TIMESTAMP { get; set; } // DATE
		[Column,     NotNull    ] public string   KEY              { get; set; } // NVARCHAR2(100)
		[Column,        Nullable] public string   VALUE            { get; set; } // NVARCHAR2(3998)

		#region Associations

		/// <summary>
		/// FK_CANNED_MESSAGE_CUSTOMER
		/// </summary>
		[Association(ThisKey="CUSTOMER_ID", OtherKey="ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_CANNED_MESSAGE_CUSTOMER", BackReferenceName="CANNEDMESSAGEs")]
		public CUSTOMER CANNEDMESSAGECUSTOMER { get; set; }

		/// <summary>
		/// FK_CANNED_MESSAGE_DEPARTMENT
		/// </summary>
		[Association(ThisKey="DEPARTMENT_ID", OtherKey="ID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_CANNED_MESSAGE_DEPARTMENT", BackReferenceName="CANNEDMESSAGEs")]
		public DEPARTMENT CANNEDMESSAGEDEPARTMENT { get; set; }

		/// <summary>
		/// FK_CANNED_MESSAGE_USER
		/// </summary>
		[Association(ThisKey="USER_ID", OtherKey="ID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_CANNED_MESSAGE_USER", BackReferenceName="CANNEDMESSAGEUSERs")]
		public CUSTOMER_USER CANNEDMESSAGEUSER { get; set; }

		#endregion
	}

	[Table("CHAT_EVENT")]
	public partial class CHAT_EVENT
	{
		[Column,     NotNull    ] public decimal  CHAT_SESSION_ID          { get; set; } // NUMBER
		[PrimaryKey, NotNull    ] public decimal  CHAT_EVENT_ID            { get; set; } // NUMBER
		[Column,     NotNull    ] public sbyte    CHAT_EVENT_TYPE_ID       { get; set; } // NUMBER (2,0)
		[Column,     NotNull    ] public DateTime TIMESTAMP                { get; set; } // DATE
		[Column,        Nullable] public uint?    AGENT_ID                 { get; set; } // NUMBER
		[Column,        Nullable] public uint?    TARGET_AGENT_ID          { get; set; } // NUMBER
		[Column,        Nullable] public uint?    TARGET_DEPARTMENT_ID     { get; set; } // NUMBER
		[Column,        Nullable] public sbyte?   IS_TO_AGENTS_ONLY        { get; set; } // NUMBER (1,0)
		[Column,        Nullable] public sbyte?   IS_OFFLINE_SESSION       { get; set; } // NUMBER (1,0)
		[Column,        Nullable] public sbyte?   ACT_ON_BEHALF_OF_INVITOR { get; set; } // NUMBER (1,0)
		[Column,        Nullable] public sbyte?   IS_DISCONNECTED          { get; set; } // NUMBER (1,0)
		[Column,        Nullable] public sbyte?   IS_BECAME_OFFLINE        { get; set; } // NUMBER (1,0)
		[Column,        Nullable] public sbyte?   HAS_VIDEO                { get; set; } // NUMBER (1,0)
		[Column,        Nullable] public string   TEXT                     { get; set; } // NVARCHAR2(3998)

		#region Associations

		/// <summary>
		/// FK_CHAT_EVENT_AGENT
		/// </summary>
		[Association(ThisKey="AGENT_ID", OtherKey="ID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_CHAT_EVENT_AGENT", BackReferenceName="CHATEVENTAGENTs")]
		public CUSTOMER_USER CHATEVENTAGENT { get; set; }

		/// <summary>
		/// FK_CHAT_EVENT_SESSION
		/// </summary>
		[Association(ThisKey="CHAT_SESSION_ID", OtherKey="CHAT_SESSION_ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_CHAT_EVENT_SESSION", BackReferenceName="CHATEVENTSESSIONs")]
		public CHAT_SESSION CHATEVENTSESSION { get; set; }

		/// <summary>
		/// FK_CHAT_EVENT_TARG_AGENT
		/// </summary>
		[Association(ThisKey="TARGET_AGENT_ID", OtherKey="ID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_CHAT_EVENT_TARG_AGENT", BackReferenceName="CHATEVENTTARGAGENTs")]
		public CUSTOMER_USER CHATEVENTTARGAGENT { get; set; }

		/// <summary>
		/// FK_CHAT_EVENT_TARG_DEPT
		/// </summary>
		[Association(ThisKey="TARGET_DEPARTMENT_ID", OtherKey="ID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_CHAT_EVENT_TARG_DEPT", BackReferenceName="CHATEVENTTARGDEPTs")]
		public DEPARTMENT CHATEVENTTARGDEPT { get; set; }

		/// <summary>
		/// FK_CHAT_EVENT_TYPE
		/// </summary>
		[Association(ThisKey="CHAT_EVENT_TYPE_ID", OtherKey="CHAT_EVENT_TYPE_ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_CHAT_EVENT_TYPE", BackReferenceName="CHATEVENTTYPEs")]
		public CHAT_EVENT_TYPE CHATEVENTTYPE { get; set; }

		#endregion
	}

	[Table("CHAT_EVENT_TYPE")]
	public partial class CHAT_EVENT_TYPE
	{
		[PrimaryKey, NotNull    ] public sbyte  CHAT_EVENT_TYPE_ID { get; set; } // NUMBER (2,0)
		[Column,     NotNull    ] public string NAME               { get; set; } // VARCHAR2(64)
		[Column,        Nullable] public string DESCRIPTION        { get; set; } // VARCHAR2(256)

		#region Associations

		/// <summary>
		/// FK_CHAT_EVENT_TYPE_BackReference
		/// </summary>
		[Association(ThisKey="CHAT_EVENT_TYPE_ID", OtherKey="CHAT_EVENT_TYPE_ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<CHAT_EVENT> CHATEVENTTYPEs { get; set; }

		#endregion
	}

	[Table("CHAT_SESSION")]
	public partial class CHAT_SESSION
	{
		[PrimaryKey, NotNull    ] public decimal  CHAT_SESSION_ID        { get; set; } // NUMBER
		[Column,     NotNull    ] public uint?    CUSTOMER_ID            { get; set; } // NUMBER
		[Column,     NotNull    ] public sbyte    CHAT_SESSION_STATUS_ID { get; set; } // NUMBER (1,0)
		[Column,     NotNull    ] public sbyte    IS_OFFLINE             { get; set; } // NUMBER (1,0)
		[Column,     NotNull    ] public DateTime ADD_TIMESTAMP          { get; set; } // DATE
		[Column,        Nullable] public decimal? VISITOR_ID             { get; set; } // NUMBER

		#region Associations

		/// <summary>
		/// FK_CHAT_EVENT_SESSION_BackReference
		/// </summary>
		[Association(ThisKey="CHAT_SESSION_ID", OtherKey="CHAT_SESSION_ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<CHAT_EVENT> CHATEVENTSESSIONs { get; set; }

		/// <summary>
		/// FK_CHAT_SESSION_CUSTOMER
		/// </summary>
		[Association(ThisKey="CUSTOMER_ID", OtherKey="ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_CHAT_SESSION_CUSTOMER", BackReferenceName="CHATSESSIONs")]
		public CUSTOMER CHATSESSIONCUSTOMER { get; set; }

		/// <summary>
		/// FK_CHAT_SESSION_STATUS
		/// </summary>
		[Association(ThisKey="CHAT_SESSION_STATUS_ID", OtherKey="CHAT_SESSION_STATUS_ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_CHAT_SESSION_STATUS", BackReferenceName="CHATSESSIONSTATUS")]
		public CHAT_SESSION_STATUS CHATSESSIONSTATU { get; set; }

		/// <summary>
		/// FK_CHAT_SESSION_VISITOR
		/// </summary>
		[Association(ThisKey="VISITOR_ID", OtherKey="VISITOR_ID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_CHAT_SESSION_VISITOR", BackReferenceName="CHATSESSIONs")]
		public VISITOR CHATSESSIONVISITOR { get; set; }

		#endregion
	}

	[Table("CHAT_SESSION_STATUS")]
	public partial class CHAT_SESSION_STATUS
	{
		[PrimaryKey, NotNull    ] public sbyte  CHAT_SESSION_STATUS_ID { get; set; } // NUMBER (1,0)
		[Column,     NotNull    ] public string NAME                   { get; set; } // VARCHAR2(32)
		[Column,        Nullable] public string DESCRIPTION            { get; set; } // VARCHAR2(256)

		#region Associations

		/// <summary>
		/// FK_CHAT_SESSION_STATUS_BackReference
		/// </summary>
		[Association(ThisKey="CHAT_SESSION_STATUS_ID", OtherKey="CHAT_SESSION_STATUS_ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<CHAT_SESSION> CHATSESSIONSTATUS { get; set; }

		#endregion
	}

	[Table("CUSTOMER")]
	public partial class CUSTOMER
	{
		[PrimaryKey, NotNull    ] public uint     ID               { get; set; } // NUMBER
		[Column,     NotNull    ] public DateTime CREATE_TIMESTAMP { get; set; } // DATE
		[Column,     NotNull    ] public DateTime UPDATE_TIMESTAMP { get; set; } // DATE
		[Column,     NotNull    ] public int      STATUS_ID        { get; set; } // NUMBER (5,0)
		[Column,     NotNull    ] public string   NAME             { get; set; } // NVARCHAR2(400)
		[Column,     NotNull    ] public string   DOMAINS          { get; set; } // NCLOB
		[Column,        Nullable] public string   CREATE_IP        { get; set; } // VARCHAR2(46)

		#region Associations

		/// <summary>
		/// FK_AGENT_SESSION_CUSTOMER_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="CUSTOMER_ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<AGENT_SESSION> AGENTSESSIONs { get; set; }

		/// <summary>
		/// FK_CANNED_MESSAGE_CUSTOMER_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="CUSTOMER_ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<CANNED_MESSAGE> CANNEDMESSAGEs { get; set; }

		/// <summary>
		/// FK_CHAT_SESSION_CUSTOMER_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="CUSTOMER_ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<CHAT_SESSION> CHATSESSIONs { get; set; }

		/// <summary>
		/// FK_DEPARTMENT_CUSTOMER_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="CUSTOMER_ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<DEPARTMENT> DEPARTMENTs { get; set; }

		/// <summary>
		/// FK_PROPERTY_BAG_CUSTOMER_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="CUSTOMER_ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<PROPERTY_BAG> PROPERTYBAGs { get; set; }

		/// <summary>
		/// FK_CUSTOMER_STATUS
		/// </summary>
		[Association(ThisKey="STATUS_ID", OtherKey="OBJECT_STATUS_ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_CUSTOMER_STATUS", BackReferenceName="CUSTOMERSTATUS")]
		public OBJECT_STATUS STATUS { get; set; }

		/// <summary>
		/// FK_CUSTOMER_USER_CUSTOMER_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="CUSTOMER_ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<CUSTOMER_USER> USERs { get; set; }

		/// <summary>
		/// FK_VISITOR_CUSTOMER_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="CUSTOMER_ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<VISITOR> VISITORs { get; set; }

		/// <summary>
		/// FK_WIDGET_LOAD_CUSTOMER_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="CUSTOMER_ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<WIDGET_LOAD> WIDGETLOADs { get; set; }

		#endregion
	}

	[Table("CUSTOMER_USER")]
	public partial class CUSTOMER_USER
	{
		[PrimaryKey, NotNull    ] public uint     ID               { get; set; } // NUMBER
		[Column,     NotNull    ] public uint?    CUSTOMER_ID      { get; set; } // NUMBER
		[Column,     NotNull    ] public DateTime CREATE_TIMESTAMP { get; set; } // DATE
		[Column,     NotNull    ] public DateTime UPDATE_TIMESTAMP { get; set; } // DATE
		[Column,     NotNull    ] public sbyte    IS_ONLINE        { get; set; } // NUMBER (1,0)
		[Column,     NotNull    ] public int      STATUS_ID        { get; set; } // NUMBER (5,0)
		[Column,     NotNull    ] public string   EMAIL            { get; set; } // NVARCHAR2(512)
		[Column,     NotNull    ] public string   FIRST_NAME       { get; set; } // NVARCHAR2(120)
		[Column,        Nullable] public string   LAST_NAME        { get; set; } // NVARCHAR2(120)
		[Column,     NotNull    ] public string   PASSWORD         { get; set; } // VARCHAR2(192)
		[Column,        Nullable] public string   AVATAR           { get; set; } // NVARCHAR2(120)

		#region Associations

		/// <summary>
		/// FK_AGENT_SESSION_AGENT_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="AGENT_ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<AGENT_SESSION> AGENTSESSIONAGENTs { get; set; }

		/// <summary>
		/// FK_CANNED_MESSAGE_USER_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="USER_ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<CANNED_MESSAGE> CANNEDMESSAGEUSERs { get; set; }

		/// <summary>
		/// FK_CHAT_EVENT_AGENT_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="AGENT_ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<CHAT_EVENT> CHATEVENTAGENTs { get; set; }

		/// <summary>
		/// FK_CHAT_EVENT_TARG_AGENT_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="TARGET_AGENT_ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<CHAT_EVENT> CHATEVENTTARGAGENTs { get; set; }

		/// <summary>
		/// FK_CUSTOMER_USER_CUSTOMER
		/// </summary>
		[Association(ThisKey="CUSTOMER_ID", OtherKey="ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_CUSTOMER_USER_CUSTOMER", BackReferenceName="USERs")]
		public CUSTOMER CUSTOMERUSERCUSTOMER { get; set; }

		/// <summary>
		/// FK_CUSTOMER_USER_STATUS
		/// </summary>
		[Association(ThisKey="STATUS_ID", OtherKey="OBJECT_STATUS_ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_CUSTOMER_USER_STATUS", BackReferenceName="CUSTOMERUSERSTATUS")]
		public OBJECT_STATUS CUSTOMERUSERSTATU { get; set; }

		/// <summary>
		/// FK_FORGOT_PASSWORD_USER_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="USER_ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<FORGOT_PASSWORD> FORGOTPASSWORDUSERs { get; set; }

		/// <summary>
		/// FK_PROPERTY_BAG_USER_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="USER_ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<PROPERTY_BAG> PROPERTYBAGUSERs { get; set; }

		/// <summary>
		/// FK_USER_ROLE_USER_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="USER_ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<USER_ROLE> USERROLEUSERs { get; set; }

		#endregion
	}

	[Table("DEPARTMENT")]
	public partial class DEPARTMENT
	{
		[PrimaryKey, NotNull    ] public uint     ID               { get; set; } // NUMBER
		[Column,     NotNull    ] public uint?    CUSTOMER_ID      { get; set; } // NUMBER
		[Column,     NotNull    ] public int      STATUS_ID        { get; set; } // NUMBER (5,0)
		[Column,     NotNull    ] public int      IS_PUBLIC        { get; set; } // NUMBER (5,0)
		[Column,     NotNull    ] public DateTime ADD_TIMESTAMP    { get; set; } // DATE
		[Column,     NotNull    ] public DateTime UPDATE_TIMESTAMP { get; set; } // DATE
		[Column,     NotNull    ] public string   NAME             { get; set; } // NVARCHAR2(64)
		[Column,        Nullable] public string   DESCRIPTION      { get; set; } // NVARCHAR2(512)

		#region Associations

		/// <summary>
		/// FK_CANNED_MESSAGE_DEPARTMENT_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="DEPARTMENT_ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<CANNED_MESSAGE> CANNEDMESSAGEs { get; set; }

		/// <summary>
		/// FK_CHAT_EVENT_TARG_DEPT_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="TARGET_DEPARTMENT_ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<CHAT_EVENT> CHATEVENTTARGDEPTs { get; set; }

		/// <summary>
		/// FK_DEPARTMENT_CUSTOMER
		/// </summary>
		[Association(ThisKey="CUSTOMER_ID", OtherKey="ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_DEPARTMENT_CUSTOMER", BackReferenceName="DEPARTMENTs")]
		public CUSTOMER CUSTOMER { get; set; }

		/// <summary>
		/// FK_DEPARTMENT_STATUS
		/// </summary>
		[Association(ThisKey="STATUS_ID", OtherKey="OBJECT_STATUS_ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_DEPARTMENT_STATUS", BackReferenceName="DEPARTMENTSTATUS")]
		public OBJECT_STATUS STATUS { get; set; }

		/// <summary>
		/// FK_USER_ROLE_DEPARTMENT_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="DEPARTMENT_ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<USER_ROLE> USERROLEs { get; set; }

		#endregion
	}

	[Table("FORGOT_PASSWORD")]
	public partial class FORGOT_PASSWORD
	{
		[PrimaryKey, NotNull, Identity, SequenceName("SEQ_FORGOT_PASSWORD")] public decimal  SKEY             { get; set; } // NUMBER
		[Column,     NotNull                                               ] public uint?    USER_ID          { get; set; } // NUMBER
		[Column,     NotNull                                               ] public DateTime CREATE_TIMESTAMP { get; set; } // DATE
		[Column,     NotNull                                               ] public string   CODE             { get; set; } // VARCHAR2(80)
		[Column,     NotNull                                               ] public string   EMAIL            { get; set; } // NVARCHAR2(512)

		#region Associations

		/// <summary>
		/// FK_FORGOT_PASSWORD_USER
		/// </summary>
		[Association(ThisKey="USER_ID", OtherKey="ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_FORGOT_PASSWORD_USER", BackReferenceName="FORGOTPASSWORDUSERs")]
		public CUSTOMER_USER FORGOTPASSWORDUSER { get; set; }

		#endregion
	}

	[Table("OBJECT_STATUS")]
	public partial class OBJECT_STATUS
	{
		[PrimaryKey, NotNull    ] public sbyte  OBJECT_STATUS_ID { get; set; } // NUMBER (1,0)
		[Column,     NotNull    ] public string NAME             { get; set; } // VARCHAR2(32)
		[Column,        Nullable] public string DESCRIPTION      { get; set; } // VARCHAR2(256)

		#region Associations

		/// <summary>
		/// FK_CUSTOMER_STATUS_BackReference
		/// </summary>
		[Association(ThisKey="OBJECT_STATUS_ID", OtherKey="STATUS_ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<CUSTOMER> CUSTOMERSTATUS { get; set; }

		/// <summary>
		/// FK_CUSTOMER_USER_STATUS_BackReference
		/// </summary>
		[Association(ThisKey="OBJECT_STATUS_ID", OtherKey="STATUS_ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<CUSTOMER_USER> CUSTOMERUSERSTATUS { get; set; }

		/// <summary>
		/// FK_DEPARTMENT_STATUS_BackReference
		/// </summary>
		[Association(ThisKey="OBJECT_STATUS_ID", OtherKey="STATUS_ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<DEPARTMENT> DEPARTMENTSTATUS { get; set; }

		#endregion
	}

	[Table("PROPERTY_BAG")]
	public partial class PROPERTY_BAG
	{
		[PrimaryKey, NotNull,     Identity, SequenceName("SEQ_PROPERTY_BAG")] public decimal PROPERTY_BAG_SKEY { get; set; } // NUMBER
		[Column,        Nullable                                            ] public uint?   CUSTOMER_ID       { get; set; } // NUMBER
		[Column,        Nullable                                            ] public uint?   USER_ID           { get; set; } // NUMBER
		[Column,        Nullable                                            ] public string  PROPERTY_TYPE     { get; set; } // VARCHAR2(64)
		[Column,        Nullable                                            ] public string  PROPERTY_FOLDER   { get; set; } // VARCHAR2(128)
		[Column,        Nullable                                            ] public string  PROPERTY_NAME     { get; set; } // VARCHAR2(192)
		[Column,        Nullable                                            ] public string  PROPERTY_VALUE    { get; set; } // NVARCHAR2(4000)

		#region Associations

		/// <summary>
		/// FK_PROPERTY_BAG_CUSTOMER
		/// </summary>
		[Association(ThisKey="CUSTOMER_ID", OtherKey="ID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_PROPERTY_BAG_CUSTOMER", BackReferenceName="PROPERTYBAGs")]
		public CUSTOMER PROPERTYBAGCUSTOMER { get; set; }

		/// <summary>
		/// FK_PROPERTY_BAG_USER
		/// </summary>
		[Association(ThisKey="USER_ID", OtherKey="ID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_PROPERTY_BAG_USER", BackReferenceName="PROPERTYBAGUSERs")]
		public CUSTOMER_USER PROPERTYBAGUSER { get; set; }

		#endregion
	}

	[Table("USER_ROLE")]
	public partial class USER_ROLE
	{
		[Column, NotNull    ] public uint?    USER_ID       { get; set; } // NUMBER
		[Column, NotNull    ] public decimal  ROLE_ID       { get; set; } // NUMBER
		[Column,    Nullable] public uint?    DEPARTMENT_ID { get; set; } // NUMBER
		[Column, NotNull    ] public DateTime ADD_TIMESTAMP { get; set; } // DATE

		#region Associations

		/// <summary>
		/// FK_USER_ROLE_DEPARTMENT
		/// </summary>
		[Association(ThisKey="DEPARTMENT_ID", OtherKey="ID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_USER_ROLE_DEPARTMENT", BackReferenceName="USERROLEs")]
		public DEPARTMENT USERROLEDEPARTMENT { get; set; }

		/// <summary>
		/// FK_USER_ROLE_USER
		/// </summary>
		[Association(ThisKey="USER_ID", OtherKey="ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_USER_ROLE_USER", BackReferenceName="USERROLEUSERs")]
		public CUSTOMER_USER USERROLEUSER { get; set; }

		#endregion
	}

	[Table("VISITOR")]
	public partial class VISITOR
	{
		[PrimaryKey, NotNull    ] public decimal  VISITOR_ID       { get; set; } // NUMBER
		[Column,     NotNull    ] public uint?    CUSTOMER_ID      { get; set; } // NUMBER
		[Column,     NotNull    ] public DateTime ADD_TIMESTAMP    { get; set; } // DATE
		[Column,     NotNull    ] public DateTime UPDATE_TIMESTAMP { get; set; } // DATE
		[Column,        Nullable] public string   NAME             { get; set; } // NVARCHAR2(256)
		[Column,        Nullable] public string   EMAIL            { get; set; } // VARCHAR2(64)
		[Column,        Nullable] public string   PHONE            { get; set; } // VARCHAR2(64)
		[Column,        Nullable] public sbyte?   MEDIA_SUPPORT    { get; set; } // NUMBER (2,0)
		[Column,        Nullable] public sbyte?   TRANSCRIPT_MODE  { get; set; } // NUMBER (1,0)

		#region Associations

		/// <summary>
		/// FK_CHAT_SESSION_VISITOR_BackReference
		/// </summary>
		[Association(ThisKey="VISITOR_ID", OtherKey="VISITOR_ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<CHAT_SESSION> CHATSESSIONs { get; set; }

		/// <summary>
		/// FK_VISITOR_CUSTOMER
		/// </summary>
		[Association(ThisKey="CUSTOMER_ID", OtherKey="ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_VISITOR_CUSTOMER", BackReferenceName="VISITORs")]
		public CUSTOMER CUSTOMER { get; set; }

		#endregion
	}

	[Table("WIDGET_LOAD")]
	public partial class WIDGET_LOAD
	{
		[PrimaryKey(1), NotNull] public uint     CUSTOMER_ID { get; set; } // NUMBER
		[PrimaryKey(2), NotNull] public DateTime UPDATED     { get; set; } // DATE
		[Column,        NotNull] public decimal  LOADS       { get; set; } // NUMBER
		[Column,        NotNull] public decimal  STAMP       { get; set; } // NUMBER
		[Column,        NotNull] public decimal  ISOVERLOAD  { get; set; } // NUMBER

		#region Associations

		/// <summary>
		/// FK_WIDGET_LOAD_CUSTOMER
		/// </summary>
		[Association(ThisKey="CUSTOMER_ID", OtherKey="ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_WIDGET_LOAD_CUSTOMER", BackReferenceName="WIDGETLOADs")]
		public CUSTOMER WIDGETLOADCUSTOMER { get; set; }

		#endregion
	}

	public static partial class TableExtensions
	{
		public static AGENT_SESSION Find(this ITable<AGENT_SESSION> table, byte[] GUID)
		{
			return table.FirstOrDefault(t =>
				t.GUID == GUID);
		}

		public static CANNED_MESSAGE Find(this ITable<CANNED_MESSAGE> table, uint ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static CHAT_EVENT Find(this ITable<CHAT_EVENT> table, decimal CHAT_EVENT_ID)
		{
			return table.FirstOrDefault(t =>
				t.CHAT_EVENT_ID == CHAT_EVENT_ID);
		}

		public static CHAT_EVENT_TYPE Find(this ITable<CHAT_EVENT_TYPE> table, sbyte CHAT_EVENT_TYPE_ID)
		{
			return table.FirstOrDefault(t =>
				t.CHAT_EVENT_TYPE_ID == CHAT_EVENT_TYPE_ID);
		}

		public static CHAT_SESSION Find(this ITable<CHAT_SESSION> table, decimal CHAT_SESSION_ID)
		{
			return table.FirstOrDefault(t =>
				t.CHAT_SESSION_ID == CHAT_SESSION_ID);
		}

		public static CHAT_SESSION_STATUS Find(this ITable<CHAT_SESSION_STATUS> table, sbyte CHAT_SESSION_STATUS_ID)
		{
			return table.FirstOrDefault(t =>
				t.CHAT_SESSION_STATUS_ID == CHAT_SESSION_STATUS_ID);
		}

		public static CUSTOMER Find(this ITable<CUSTOMER> table, uint ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static CUSTOMER_USER Find(this ITable<CUSTOMER_USER> table, uint ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static DEPARTMENT Find(this ITable<DEPARTMENT> table, uint ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static FORGOT_PASSWORD Find(this ITable<FORGOT_PASSWORD> table, decimal SKEY)
		{
			return table.FirstOrDefault(t =>
				t.SKEY == SKEY);
		}

		public static OBJECT_STATUS Find(this ITable<OBJECT_STATUS> table, sbyte OBJECT_STATUS_ID)
		{
			return table.FirstOrDefault(t =>
				t.OBJECT_STATUS_ID == OBJECT_STATUS_ID);
		}

		public static PROPERTY_BAG Find(this ITable<PROPERTY_BAG> table, decimal PROPERTY_BAG_SKEY)
		{
			return table.FirstOrDefault(t =>
				t.PROPERTY_BAG_SKEY == PROPERTY_BAG_SKEY);
		}

		public static VISITOR Find(this ITable<VISITOR> table, decimal VISITOR_ID)
		{
			return table.FirstOrDefault(t =>
				t.VISITOR_ID == VISITOR_ID);
		}

		public static WIDGET_LOAD Find(this ITable<WIDGET_LOAD> table, uint CUSTOMER_ID, DateTime UPDATED)
		{
			return table.FirstOrDefault(t =>
				t.CUSTOMER_ID == CUSTOMER_ID &&
				t.UPDATED     == UPDATED);
		}
	}
}
